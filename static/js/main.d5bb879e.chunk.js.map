{"version":3,"sources":["components/Item.tsx","graphql/countriesQuery.ts","App.tsx","index.tsx"],"names":["Item","continent","name","code","emoji","style","padding","borderRadius","boxShadow","display","justifyContent","alignItems","margin","marginTop","GET_COUNTRIES","gql","App","useQuery","loading","data","useState","standartValues","setStandartValues","selectedValue","setSelectedValue","searchValue","setSearchValue","values","setValues","value","options","Search","Input","antIcon","LoadingOutlined","fontSize","spin","useEffect","countries","changeValue","newValues","filter","item","className","flexDirection","defaultValue","marginBottom","minWidth","onChange","map","option","Option","placeholder","onSearch","trim","filteredValues","toLowerCase","length","includes","e","target","width","indicator","client","ApolloClient","cache","InMemoryCache","uri","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d5bb879e.chunk.js","sourcesContent":["import React from 'react'\r\nimport { IItem } from '../interfaces/itemInterface'\r\n\r\nconst Item: React.FC<IItem> = ({ continent, name, code, emoji }: IItem) => {\r\n    return (\r\n        <div style={{ padding: '10px 16px', borderRadius: '1px solid black', boxShadow: '0px 0px 2px 1px black' }}>\r\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                <h3 style={{ margin: '0 10px 0 0' }}>{name}</h3>\r\n                <p style={{ margin: 0 }}>{emoji}</p>\r\n            </div>\r\n            <div style={{ marginTop: '10px' }}>\r\n                <p style={{ margin: 0 }}>ISO code: {code}</p>\r\n                <p style={{ margin: 0 }}>Continent: {continent}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Item","import { gql } from '@apollo/client'\r\n\r\nexport const GET_COUNTRIES = gql`\r\n    query {\r\n        countries {\r\n            code\r\n        name\r\n        emoji\r\n        emojiU\r\n        continent {\r\n            name\r\n      }\r\n    }\r\n  }\r\n`","import { useEffect, useState } from 'react';\nimport './App.css';\nimport { useQuery } from '@apollo/client'\nimport Item from './components/Item';\nimport { Input, Select, Spin } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { GET_COUNTRIES } from './graphql/countriesQuery';\nimport { IItem } from './interfaces/itemInterface';\n\n\n\nconst App: React.FC = () => {\n  const { loading, data } = useQuery(GET_COUNTRIES)\n  const [standartValues, setStandartValues] = useState<IItem[]>([])\n  const [selectedValue, setSelectedValue] = useState('')\n  const [searchValue, setSearchValue] = useState('')\n  const [values, setValues] = useState<IItem[]>([])\n  const [options] = useState([\n    { value: 'All' },\n    { value: 'Europe' },\n    { value: 'Asia' },\n    { value: 'North America' },\n    { value: 'South America' },\n    { value: 'Oceania' },\n    { value: 'Africa' },\n    { value: 'Antarctica' },\n  ])\n\n  const { Search } = Input\n  const antIcon = <LoadingOutlined style={{ fontSize: 48 }} spin />;\n\n  useEffect(() => {\n    if (!loading) {\n      setStandartValues(data.countries)\n      setValues(data.countries)\n    }\n  }, [data, loading])\n\n  const changeValue = (value: string) => {\n    setSearchValue('')\n    if (value === 'All') {\n      setValues(standartValues)\n    }\n    else {\n      const newValues = standartValues.filter(item => item.continent.name === value)\n      setValues(newValues)\n    }\n    setSelectedValue(value)\n  }\n\n\n  const onSearch = (value: string) => {\n    if ((value.trim() !== '' && selectedValue === '') || (value.trim() !== '' && selectedValue === 'All')) {\n      const filteredValues = standartValues.filter(item => {\n        return item.name.toLowerCase() === value.toLowerCase() || item.code.toLowerCase() === value.toLowerCase()\n      })\n      let data\n      if (value.length > 2) {\n        data = standartValues.filter(item => {\n          return item.name.toLowerCase().includes(value.toLowerCase())\n        })\n        setValues(data)\n      }\n      else {\n        setValues(filteredValues)\n      }\n    }\n    else if (value.trim() !== '' && (selectedValue !== '' || 'All')) {\n      const filteredValues = values.filter(item => {\n        return (item.continent.name === selectedValue && item.name.toLowerCase() === value.toLowerCase()) || (item.continent.name === selectedValue && item.code.toLowerCase() === value.toLowerCase())\n      })\n      let data\n      if (value.length > 2) {\n        data = standartValues.filter(item => {\n          return item.name.toLowerCase().includes(value.toLowerCase()) && item.continent.name === selectedValue\n        })\n        setValues(data)\n      }\n      else {\n        setValues(filteredValues)\n      }\n    }\n    else {\n      setValues(standartValues)\n    }\n\n  }\n\n  const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.value === '') {\n      selectedValue === '' ? setValues(standartValues) : changeValue(selectedValue)\n      setSearchValue('')\n    }\n    else {\n      if (values.length === 0) {\n      }\n      setSearchValue(e.target.value)\n    }\n  }\n\n  return (\n\n    <div className=\"App\">\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        <h1>Country Finder</h1>\n\n        <Select\n          defaultValue={\"Choose continent\"}\n          style={{ marginBottom: '10px', minWidth: '160px' }}\n          onChange={(value) => changeValue(value)}\n        >\n          {options.map(option => <Select.Option key={option.value} value={option.value}>{option.value}</Select.Option>)}\n        </Select>\n        <Search\n          value={searchValue}\n          placeholder=\"Find country by name or ISO code...\"\n          onSearch={onSearch}\n          onChange={onInputChange}\n          style={{ width: 300, marginBottom: 10 }} />\n        {loading && <Spin indicator={antIcon} ></Spin>}\n        {(values.length === 0 && !loading) && <h2>No results for {searchValue} {selectedValue !== '' ? `in ${selectedValue}` : null}</h2>}\n        <div className='container'>\n          {values.length !== 0\n            && values.map(item =>\n              <Item\n                key={item.name}\n                emoji={item.emoji}\n                code={item.code}\n                name={item.name}\n                continent={item.continent.name}></Item>)\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: 'https://countries.trevorblades.com/',\n})\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}